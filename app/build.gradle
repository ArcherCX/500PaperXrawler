apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: './signing_config.gradle'

ext {
    appId = "com.archer.s00paperxrawler"
    verName = "2.0"
    authority = appId
}
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId appId
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 2
        versionName verName
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                CONTENT_PROVIDER_AUTHORITY: "${authority}"
        ]
    }
    buildTypes {
        debug {
            buildConfigField('String', 'CONTENT_PROVIDER_AUTHORITY', "\"${authority}\"")
        }
        sslDebug.initWith(buildTypes.debug)
        sslDebug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            buildConfigField('String', 'CONTENT_PROVIDER_AUTHORITY', "\"${authority}\"")
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        sslDebug { setRoot 'src/sslDebug' }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "500PaperXrawler_${variant.buildType.name}_${variant.versionName}.apk"
        }
        variant.assembleProvider.get().doLast {
            configure { assemble ->
                copy {
                    def outputFiles = variant.getPackageApplicationProvider().get().outputs.files.iterator()
                    while (outputFiles.hasNext()) {
                        def resDir = outputFiles.next()
                        println("assemble output file : " + resDir.name)
                        if (resDir.name == "release") {
                            File des = new File(getRootDir(), "AssembleApks/${variant.buildType.name}")
                            if (des.exists()) {
                                des.listFiles().each { it.delete() }
                            }
                            resDir.listFiles().any {
                                if (it.getName().endsWith(".apk")) {
                                    from it
                                    into des
                                    return true
                                }
                            }
                            break
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    implementation 'com.github.satoshun.RxWebView:rxwebview-kotlin:2.2.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test:runner:1.1.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
